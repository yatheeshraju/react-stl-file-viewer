{"version":3,"sources":["../../src/Stl.js","../../src/index.js","App.js","index.js"],"names":["StlViewer","width","height","url","objectColor","gridLineColor","skyboxColor","groundColor","lightColor","useEffect","scene","camera","cameraTarget","renderer","antialias","alpha","document","controls","OrbitControls","ground","color","depthWrite","Math","grid","hemiLight","directionalLight","loader","material","specular","shininess","mesh","window","render","animate","requestAnimationFrame","Stl","id","App","style","display","justifyContent","href","ReactDOM","getElementById"],"mappings":"qKAIA,U,yDCDaA,EAAY,SAAC,GASpB,IARJC,EAQI,EARJA,MACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,IACAC,EAKI,EALJA,YACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAcA,OAZAC,qBAAU,YDPG,SAAa,EAAb,gBAYbC,EAAQ,IAARA,KACAA,WAAmB,IAAI,EAAJ,EAAnBA,GACAA,MAAY,IAAI,EAAJ,eAAZA,MAGAC,EAAS,IAAI,EAAJ,KAAgCV,EAAhC,IAATU,MACAA,0BAEAC,EAAe,IAAI,EAAJ,MAAfA,IAGAC,EAAW,IAAI,EAAJ,EAAwB,CAAEC,WAAF,EAAmBC,OAAO,KAC7DF,aAGAG,iDAAiDH,EAAjDG,aAGAC,EAAW,IAAIC,EAAJ,IAA0BL,EAArCI,aACAA,kBACAA,WAIA,IAAME,EAAS,IAAI,EAAJ,EACb,IAAI,EAAJ,MADa,KAEb,IAAI,EAAJ,EAA4B,CAAEC,MAAF,EAAsBC,YAAY,KAEhEF,cAAqBG,KAAD,GAApBH,EACAA,mBACAT,SAEA,IAAMa,EAAO,IAAI,EAAJ,WAAb,GACAA,sBACAA,0BACAb,SAGA,IAAMc,EAAY,IAAI,EAAJ,WAAlB,SACAA,wBACAd,SAEA,IAAMe,EAAmB,IAAI,EAAJ,EAAzB,GACAA,0BACAA,gBACAA,wBACAA,4BACAA,0BACAA,0BACAf,UAGe,IAAf,KACAgB,QAAiB,YACf,IAAMC,EAAW,IAAI,EAAJ,EAA4B,CAC3CP,MAD2C,EAE3CQ,SAF2C,QAG3CC,UAAW,MAEPC,EAAO,IAAI,EAAJ,IAAb,GAEAA,sBACAA,gBAAmBR,KAAD,GAAlBQ,OACAA,mBAEAA,gBACAA,mBAEApB,YAKFG,gBAAuBkB,OAAvBlB,kBACAA,qBAEAA,uBASA,IAMMmB,EAAS,WACbrB,YACAE,gBARc,SAAVoB,IACJC,yBAEAF,IAOFC,GCnGEE,CAAI,EAAD,YAAHA,KADF1B,IAYO,yBAAK2B,GAAG,eCUFC,MA/BH,IAER,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGlB,6BACE,wDAEE,uBAAGC,KAAK,gEAAR,SAKF,kBAAC,EAAD,CACExC,MAAM,MACNC,OAAO,MACPC,IAAI,eACJI,YAAY,qBACZH,YAAY,oBACZE,YAAY,qBACZD,cAAc,eACdG,WAAW,uBCtBrBkC,IAASV,OAAO,kBAAC,EAAD,MAAShB,SAAS2B,eAAe,U","file":"static/js/main.cb61cf74.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nlet camera, cameraTarget, scene, renderer, controls\n\nexport default function Stl(\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor\n) {\n  // scene setup\n\n  scene = new THREE.Scene()\n  scene.background = new THREE.Color(skyboxColor)\n  scene.fog = new THREE.Fog(0xa0a0a0, 200, 1000)\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000)\n  camera.position.set(200, 100, 200)\n\n  cameraTarget = new THREE.Vector3(0, 0, 0)\n\n  // renderer setup\n  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\n  renderer.setSize(width, height)\n\n  // where to render your scene\n  document.getElementById('stlviewer').appendChild(renderer.domElement)\n\n  // controls\n  controls = new OrbitControls(camera, renderer.domElement)\n  controls.target.set(0, 0, 0)\n  controls.update()\n\n  // ground\n\n  const ground = new THREE.Mesh(\n    new THREE.PlaneGeometry(2000, 2000),\n    new THREE.MeshPhongMaterial({ color: groundColor, depthWrite: false })\n  )\n  ground.rotation.x = -Math.PI / 2\n  ground.receiveShadow = true\n  scene.add(ground)\n\n  const grid = new THREE.GridHelper(2000, 20, gridLineColor, gridLineColor)\n  grid.material.opacity = 0.2\n  grid.material.transparent = true\n  scene.add(grid)\n\n  // lights\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444)\n  hemiLight.position.set(0, 200, 0)\n  scene.add(hemiLight)\n\n  const directionalLight = new THREE.DirectionalLight(lightColor)\n  directionalLight.position.set(0, 200, 100)\n  directionalLight.castShadow = true\n  directionalLight.shadow.camera.top = 180\n  directionalLight.shadow.camera.bottom = -100\n  directionalLight.shadow.camera.left = -120\n  directionalLight.shadow.camera.right = 120\n  scene.add(directionalLight)\n\n  // adding stl to scene\n  const loader = new STLLoader()\n  loader.load(url, (geometry) => {\n    const material = new THREE.MeshPhongMaterial({\n      color: objectColor,\n      specular: 0x111111,\n      shininess: 200\n    })\n    const mesh = new THREE.Mesh(geometry, material)\n\n    mesh.position.set(0, 0, 0)\n    mesh.rotation.set(-Math.PI / 2, 0, 0)\n    mesh.scale.set(1, 1, 1)\n\n    mesh.castShadow = true\n    mesh.receiveShadow = true\n\n    scene.add(mesh)\n  })\n\n  // renderer\n\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.outputEncoding = THREE.sRGBEncoding\n\n  renderer.shadowMap.enabled = true\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(window.innerWidth, height)\n  }\n\n  const animate = () => {\n    requestAnimationFrame(animate)\n\n    render()\n  }\n\n  const render = () => {\n    camera.lookAt(cameraTarget)\n    renderer.render(scene, camera)\n  }\n  animate()\n  // window.addEventListener('resize', onWindowResize)\n}\n","import React, { useEffect } from 'react'\nimport Stl from './Stl'\n\nexport const StlViewer = ({\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor\n}) => {\n  useEffect(() => {\n    Stl(\n      width,\n      height,\n      url,\n      objectColor,\n      gridLineColor,\n      skyboxColor,\n      groundColor,\n      lightColor\n    )\n  }, [])\n  return <div id='stlviewer'></div>\n}\n","import React from 'react'\n\nimport { StlViewer } from 'react-stl-file-viewer'\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center'\n      }}\n    >\n      <div>\n        <div>\n          react-stl-file-viewer --\n          <a href='https://github.com/yatheeshraju/react-stl-file-viewer#readme'>\n            docs\n          </a>\n        </div>\n\n        <StlViewer\n          width='500'\n          height='500'\n          url='elephant.stl'\n          groundColor='rgb(255, 255, 255)'\n          objectColor='rgb(77, 136, 255)'\n          skyboxColor='rgb(255, 255, 255)'\n          gridLineColor='rgb(0, 0, 0)'\n          lightColor='rgb(255,255,255)'\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}