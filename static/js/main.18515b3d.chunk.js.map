{"version":3,"sources":["../../src/Stl.js","../../src/index.js","App.js","index.js"],"names":["StlViewer","width","height","url","objectColor","gridLineColor","skyboxColor","groundColor","lightColor","useEffect","scene","camera","cameraTarget","renderer","antialias","alpha","preserveDrawingBuffer","document","controls","OrbitControls","ground","color","depthWrite","Math","grid","hemiLight","directionalLight","loader","material","specular","shininess","mesh","window","render","animate","requestAnimationFrame","Stl","id","App","useState","photo","setphoto","flexGrow","padding","border","as","size","src","onClick","getElementsByTagName","toDataURL","ReactDOM","resetCSS","getElementById"],"mappings":"+NAIA,U,mECDaA,EAAY,SAAC,GASpB,IARJC,EAQI,EARJA,MACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,IACAC,EAKI,EALJA,YACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAcA,OAZAC,qBAAU,YDPG,SAAa,EAAb,gBAYbC,EAAQ,IAARA,KACAA,WAAmB,IAAI,EAAJ,EAAnBA,GACAA,MAAY,IAAI,EAAJ,eAAZA,MAGAC,EAAS,IAAI,EAAJ,KAAgCV,EAAhC,IAATU,MACAA,0BAEAC,EAAe,IAAI,EAAJ,MAAfA,IAGAC,EAAW,IAAI,EAAJ,EAAwB,CACjCC,WADiC,EAEjCC,OAFiC,EAGjCC,uBAAuB,KAEzBH,aAGAI,kDACAA,iDAAiDJ,EAAjDI,aAGAC,EAAW,IAAIC,EAAJ,IAA0BN,EAArCK,aACAA,kBACAA,WAIA,IAAME,EAAS,IAAI,EAAJ,EACb,IAAI,EAAJ,MADa,KAEb,IAAI,EAAJ,EAA4B,CAAEC,MAAF,EAAsBC,YAAY,KAEhEF,cAAqBG,KAAD,GAApBH,EACAA,mBACAV,SAEA,IAAMc,EAAO,IAAI,EAAJ,WAAb,GACAA,sBACAA,0BACAd,SAGA,IAAMe,EAAY,IAAI,EAAJ,WAAlB,SACAA,wBACAf,SAEA,IAAMgB,EAAmB,IAAI,EAAJ,EAAzB,GACAA,0BACAA,gBACAA,wBACAA,4BACAA,0BACAA,0BACAhB,UAGe,IAAf,KACAiB,QAAiB,YACf,IAAMC,EAAW,IAAI,EAAJ,EAA4B,CAC3CP,MAD2C,EAE3CQ,SAF2C,QAG3CC,UAAW,MAEPC,EAAO,IAAI,EAAJ,IAAb,GAEAA,sBACAA,gBAAmBR,KAAD,GAAlBQ,OACAA,mBAEAA,gBACAA,mBAEArB,YAKFG,gBAAuBmB,OAAvBnB,kBACAA,qBAEAA,uBASA,IAKMoB,EAAS,WACbtB,YACAE,gBAPc,SAAVqB,IACJC,yBACAF,IAOFC,GCvGEE,CAAI,EAAD,YAAHA,KAUC,CAXH3B,IAYO,yBAAK4B,GAAG,e,wCCeFC,MApCH,KAAO,MAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAMhB,OACE,6BACE,kBAAC,IAAD,CAAMC,SAAU,EAAGC,QAAS,GAC1B,kBAAC,IAAD,CAAKC,OAAO,OACV,kBAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,MAAtB,UAGA,kBAAC,EAAD,CACE7C,MAAO,IACPC,OAAQ,IACRC,IAAI,eACJI,YAAY,qBACZH,YAAY,oBACZE,YAAY,qBACZD,cAAc,eACdG,WAAW,wBAGf,kBAAC,IAAD,CAAKoC,OAAO,OACV,kBAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,MAAtB,SAGA,kBAAC,IAAD,CAAOC,IAAKP,MAGhB,kBAAC,IAAD,CAAQQ,QAAS,IAAMP,EA5BZxB,SAASgC,qBAAqB,UAAU,GACvCC,cA2BZ,gB,QC7BNC,IAASlB,OACP,kBAAC,IAAD,CAAgBmB,UAAU,GACxB,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,W","file":"static/js/main.18515b3d.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nlet camera, cameraTarget, scene, renderer, controls\n\nexport default function Stl(\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor\n) {\n  // scene setup\n\n  scene = new THREE.Scene()\n  scene.background = new THREE.Color(skyboxColor)\n  scene.fog = new THREE.Fog(0xa0a0a0, 200, 1000)\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000)\n  camera.position.set(200, 100, 200)\n\n  cameraTarget = new THREE.Vector3(0, 0, 0)\n\n  // renderer setup\n  renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n    preserveDrawingBuffer: true\n  })\n  renderer.setSize(width, height)\n\n  // where to render your scene\n  document.getElementById('stlviewer').innerHTML = ''\n  document.getElementById('stlviewer').appendChild(renderer.domElement)\n\n  // controls\n  controls = new OrbitControls(camera, renderer.domElement)\n  controls.target.set(0, 0, 0)\n  controls.update()\n\n  // ground\n\n  const ground = new THREE.Mesh(\n    new THREE.PlaneGeometry(2000, 2000),\n    new THREE.MeshPhongMaterial({ color: groundColor, depthWrite: false })\n  )\n  ground.rotation.x = -Math.PI / 2\n  ground.receiveShadow = true\n  scene.add(ground)\n\n  const grid = new THREE.GridHelper(2000, 20, gridLineColor, gridLineColor)\n  grid.material.opacity = 0.2\n  grid.material.transparent = true\n  scene.add(grid)\n\n  // lights\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444)\n  hemiLight.position.set(0, 200, 0)\n  scene.add(hemiLight)\n\n  const directionalLight = new THREE.DirectionalLight(lightColor)\n  directionalLight.position.set(0, 200, 100)\n  directionalLight.castShadow = true\n  directionalLight.shadow.camera.top = 180\n  directionalLight.shadow.camera.bottom = -100\n  directionalLight.shadow.camera.left = -120\n  directionalLight.shadow.camera.right = 120\n  scene.add(directionalLight)\n\n  // adding stl to scene\n  const loader = new STLLoader()\n  loader.load(url, (geometry) => {\n    const material = new THREE.MeshPhongMaterial({\n      color: objectColor,\n      specular: 0x111111,\n      shininess: 200\n    })\n    const mesh = new THREE.Mesh(geometry, material)\n\n    mesh.position.set(0, 0, 0)\n    mesh.rotation.set(-Math.PI / 2, 0, 0)\n    mesh.scale.set(1, 1, 1)\n\n    mesh.castShadow = true\n    mesh.receiveShadow = true\n\n    scene.add(mesh)\n  })\n\n  // renderer\n\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.outputEncoding = THREE.sRGBEncoding\n\n  renderer.shadowMap.enabled = true\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(window.innerWidth, height)\n  }\n\n  const animate = () => {\n    requestAnimationFrame(animate)\n    render()\n  }\n\n  const render = () => {\n    camera.lookAt(cameraTarget)\n    renderer.render(scene, camera)\n  }\n  animate()\n  // window.addEventListener('resize', onWindowResize)\n}\n","import React, { useEffect } from 'react'\nimport Stl from './Stl'\n\nexport const StlViewer = ({\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor\n}) => {\n  useEffect(() => {\n    Stl(\n      width,\n      height,\n      url,\n      objectColor,\n      gridLineColor,\n      skyboxColor,\n      groundColor,\n      lightColor\n    )\n  }, [url])\n  return <div id='stlviewer'></div>\n}\n","import React, { useState } from 'react'\n\nimport { StlViewer } from 'react-stl-file-viewer'\nimport { Box, Button, Flex, Heading, Image } from '@chakra-ui/react'\nconst App = () => {\n  const [photo, setphoto] = useState('')\n  function getFrame() {\n    let canvas = document.getElementsByTagName('canvas')[0]\n    return canvas.toDataURL()\n  }\n  return (\n    <div>\n      <Flex flexGrow={1} padding={1}>\n        <Box border='1px'>\n          <Heading as='h3' size='md'>\n            Canvas\n          </Heading>\n          <StlViewer\n            width={500}\n            height={500}\n            url='elephant.stl'\n            groundColor='rgb(255, 255, 255)'\n            objectColor='rgb(50, 255, 255)'\n            skyboxColor='rgb(255, 255, 255)'\n            gridLineColor='rgb(0, 0, 0)'\n            lightColor='rgb(255, 255, 255)'\n          />\n        </Box>\n        <Box border='5px'>\n          <Heading as='h3' size='md'>\n            Photo\n          </Heading>\n          <Image src={photo} />\n        </Box>\n      </Flex>\n      <Button onClick={() => setphoto(getFrame())}>Take Photo</Button>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ChakraProvider } from '@chakra-ui/react'\nReactDOM.render(\n  <ChakraProvider resetCSS={true}>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}